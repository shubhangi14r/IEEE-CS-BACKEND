from flask import Flask, request, jsonify
from flask_jwt_extended import JWTManager, create_access_token, jwt_required
import pymysql
import datetime

app = Flask(__name__)

# Database Connection
db = pymysql.connect(host="localhost", user="root", password="", database="movie_booking")
cursor = db.cursor()

# JWT Configuration
app.config["JWT_SECRET_KEY"] = "super-secret-key"
jwt = JWTManager(app)

# ✅ Authentication
@app.route("/auth/register", methods=["POST"])
def register():
    data = request.json
    cursor.execute("INSERT INTO users (username, password, role) VALUES (%s, %s, %s)", 
                   (data["username"], data["password"], "owner"))
    db.commit()
    return jsonify({"message": "Owner registered successfully"}), 201

@app.route("/auth/login", methods=["POST"])
def login():
    data = request.json
    cursor.execute("SELECT id FROM users WHERE username=%s AND password=%s", 
                   (data["username"], data["password"]))
    user = cursor.fetchone()
    if user:
        token = create_access_token(identity=user[0])
        return jsonify({"token": token})
    return jsonify({"message": "Invalid credentials"}), 401

# ✅ Add Movie
@app.route("/movies", methods=["POST"])
@jwt_required()
def add_movie():
    data = request.json
    cursor.execute("INSERT INTO movies (title, duration) VALUES (%s, %s)", 
                   (data["title"], data["duration"]))
    db.commit()
    return jsonify({"message": "Movie added successfully"}), 201

# ✅ Get All Movies
@app.route("/movies", methods=["GET"])
def get_movies():
    cursor.execute("SELECT * FROM movies")
    movies = cursor.fetchall()
    return jsonify({"movies": movies})

# ✅ Add Show
@app.route("/shows", methods=["POST"])
@jwt_required()
def add_show():
    data = request.json
    cursor.execute("INSERT INTO shows (movie_id, theater_id, showtime, base_price, total_seats) VALUES (%s, %s, %s, %s, %s)",
                   (data["movie_id"], data["theater_id"], data["showtime"], data["base_price"], data["total_seats"]))
    db.commit()
    return jsonify({"message": "Show added successfully"}), 201

# ✅ Get Shows
@app.route("/shows", methods=["GET"])
def get_shows():
    cursor.execute("SELECT * FROM shows")
    shows = cursor.fetchall()
    return jsonify({"shows": shows})

# ✅ Book Ticket
@app.route("/bookings", methods=["POST"])
def book_ticket():
    data = request.json
    cursor.execute("SELECT base_price, total_seats FROM shows WHERE id=%s", (data["show_id"],))
    show = cursor.fetchone()
    if not show:
        return jsonify({"message": "Show not found"}), 404
    
    base_price = show[0]
    total_seats = show[1]

    # Apply Dynamic Pricing
    booked_seats = data["num_seats"]
    final_price = base_price
    if booked_seats > total_seats * 0.7:
        final_price *= 1.3  # +30% price
    if datetime.datetime.now().hour in range(19, 22):  
        final_price *= 1.2  # Peak hour price
    if booked_seats < 5:  
        final_price *= 0.9  # Low demand discount

    total_price = final_price * data["num_seats"]
    
    cursor.execute("INSERT INTO bookings (user_id, show_id, seats, price) VALUES (%s, %s, %s, %s)",
                   (data["user_id"], data["show_id"], data["num_seats"], total_price))
    db.commit()
    return jsonify({"message": "Booking successful", "total_price": total_price})

# ✅ Get User Booking History
@app.route("/bookings", methods=["GET"])
def get_user_bookings():
    user_id = request.args.get("user_id")
    cursor.execute("SELECT * FROM bookings WHERE user_id=%s", (user_id,))
    bookings = cursor.fetchall()
    return jsonify({"bookings": bookings})

if __name__ == "__main__":
    app.run(debug=True)
